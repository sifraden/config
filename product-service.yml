server:
  port: 8082

eureka:
  instance:
    leaseRenewalIntervalInSeconds: 30
  metadataMap:
    instanceId: ${vcap.application.instance_id:${spring.application.name}:${spring.application.instance_id}}
  client:
    serviceUrl:
      defaultZone: ${EUREKA_SERVER:http://discovery-service:8761/eureka/}
    registryFetchIntervalSeconds: 30

spring:
  data:
    mongodb:
      host: ${MONGO_SERVER:mongo.mongo.svc.cluster.nip.io}
      port: ${MONGO_PORT:27017}
      database: products
      #uri: mongodb://localhost/products
  sleuth:
    sampler:
      percentage: 1
  zipkin:
    sender:
      type: web
  kafka:
    producer:
      bootstrap-servers: ${KAFKA_SERVER:my-cluster-kafka-bootstrap.kafka.svc.cluster.nip.io:9092}
      client-id: productId
      acks: all
      retries: 3
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        max-in-flight-requests-per-connection: 1
        transaction-timeout-ms: 1000
        request-timeout-ms: 1000
        retry-backoff-ms: 1000
    consumer:
      bootstrap-servers: ${KAFKA_SERVER:my-cluster-kafka-bootstrap.kafka.svc.cluster.nip.io:9092}

management:
  endpoints:
    web:
      exposure:
        include: "*"


kafka:
  topic: products

security:
  active: true

