server:
  port: 8080

logging:
  config: classpath:logback-spring.xml
             
spring:
  data:
    mongodb:
      host: ${MONGO_SERVER:mongodb-svc.production.svc.cluster.local}
      port: ${MONGO_PORT:27017}
      database: orders
      username: orders-user
      password: 0RDERPa55W0rd!!
  sleuth:
    reactor:
      instrumentation-type: manual
    sampler:
      percentage: 1.0
      probability: 1.0
    opentracing:
        enabled: true
  zipkin:
    baseUrl: http://jaeger-collector:9411
  kafka:
    producer:
      bootstrap-servers: ${KAFKA_SERVER:kafka-cluster-kafka-bootstrap.production.svc:9092}
      client-id: orders
      acks: all
      retries: 3
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        max-in-flight-requests-per-connection: 1
        transaction-timeout-ms: 1000
        request-timeout-ms: 1000
        retry-backoff-ms: 1000
  jackson:
    serialization:
      WRITE_DATE_KEYS_AS_TIMESTAMPS: false

kafka:
  bootstrapAddress: ${KAFKA_SERVER:kafka-cluster-kafka-bootstrap.production.svc:9092}
  consumer:
    topic: catchup-orders
    groupId: catchupOrdersGroup
  producer:
    topic: orders

# report spans using kafka
#bootstrap:
#  servers: ${KAFKA_SERVER:localhost:9092}
    
consumer:
  payment-service: http://payment-service:8080
  
management:
  endpoint:
    web:
      exposure:
        include: "*"
    health:
      show-details: always
      probes:
        enabled: true
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
    mongo:
      enabled: true
        
